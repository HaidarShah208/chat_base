var __defProp=Object.defineProperty,__defNormalProp=(t,e,n)=>e in t?__defProp(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,__publicField=(t,e,n)=>__defNormalProp(t,"symbol"!=typeof e?e+"":e,n);!function(){"use strict";new class{constructor(){__publicField(this,"widget",null),__publicField(this,"config",{}),__publicField(this,"container",null),this.init()}init(){window.ChatbotWidget={init:t=>this.initializeWidget(t),open:()=>this.openWidget(),close:()=>this.closeWidget(),sendMessage:t=>this.sendMessage(t),destroy:()=>this.destroyWidget()},this.autoInitialize()}autoInitialize(){const t=document.currentScript;if(t){const e={};e.chatbotId=t.getAttribute("data-chatbot-id")||"default",e.position=t.getAttribute("data-position")||"bottom-right",e.primaryColor=t.getAttribute("data-primary-color")||"#000000",e.title=t.getAttribute("data-title")||"Chat Support",e.welcomeMessage=t.getAttribute("data-welcome-message")||"Hi! How can I help you today?",e.placeholder=t.getAttribute("data-placeholder")||"Type your message...",e.poweredByText=t.getAttribute("data-powered-by")||"Powered by ChatBase",e.apiEndpoint=t.getAttribute("data-api-endpoint")||void 0,e.apiKey=t.getAttribute("data-api-key")||void 0,Object.keys(e).length>0&&this.initializeWidget(e)}}async initializeWidget(t){if(this.widget)console.warn("Chatbot widget is already initialized");else{this.config={...this.getDefaultConfig(),...t};try{await this.loadDependencies(),this.container=document.createElement("div"),this.container.id="chatbot-widget-container",document.body.appendChild(this.container),await this.loadWidget(),console.log("Chatbot widget initialized successfully")}catch(e){console.error("Failed to initialize chatbot widget:",e)}}}getDefaultConfig(){return{chatbotId:"default",position:"bottom-right",primaryColor:"#000000",title:"Chat Support",welcomeMessage:"Hi! How can I help you today?",placeholder:"Type your message...",poweredByText:"Powered by ChatBase"}}async loadDependencies(){window.React&&window.ReactDOM||(await this.loadScript("https://unpkg.com/react@18/umd/react.production.min.js"),await this.loadScript("https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"),await this.loadScript("https://unpkg.com/lucide@latest/dist/umd/lucide.js"))}async loadWidget(){this.createSimpleWidget()}createSimpleWidget(){var t,e,n,i;if(!this.container)return;const o=`\n      <div id="chatbot-widget" style="\n        position: fixed;\n        ${(null==(t=this.config.position)?void 0:t.includes("bottom"))?"bottom: 16px;":"top: 16px;"}\n        ${(null==(e=this.config.position)?void 0:e.includes("right"))?"right: 16px;":"left: 16px;"}\n        width: 350px;\n        height: 500px;\n        background: white;\n        border-radius: 12px;\n        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);\n        border: 1px solid #e5e7eb;\n        display: none;\n        flex-direction: column;\n        z-index: 9999;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      ">\n        <div style="\n          padding: 16px;\n          border-bottom: 1px solid #f3f4f6;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          background-color: ${this.config.primaryColor};\n          color: white;\n          border-radius: 12px 12px 0 0;\n        ">\n          <div style="display: flex; align-items: center; gap: 8px;">\n            <div style="width: 8px; height: 8px; border-radius: 50%; background: #10b981;"></div>\n            <h3 style="font-size: 14px; font-weight: 600; margin: 0;">${this.config.title}</h3>\n          </div>\n          <button id="chatbot-close" style="\n            background: none;\n            border: none;\n            color: white;\n            cursor: pointer;\n            padding: 4px;\n            border-radius: 4px;\n            font-size: 16px;\n          ">âœ•</button>\n        </div>\n        \n        <div id="chatbot-messages" style="\n          flex: 1;\n          overflow-y: auto;\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        ">\n          <div style="\n            display: flex;\n            justify-content: flex-start;\n          ">\n            <div style="\n              max-width: 80%;\n              padding: 8px 12px;\n              border-radius: 12px 12px 12px 4px;\n              background-color: #f3f4f6;\n              color: #374151;\n              font-size: 14px;\n              line-height: 1.4;\n            ">${this.config.welcomeMessage}</div>\n          </div>\n        </div>\n        \n        <div style="\n          padding: 16px;\n          border-top: 1px solid #f3f4f6;\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        ">\n          <input id="chatbot-input" type="text" placeholder="${this.config.placeholder}" style="\n            flex: 1;\n            padding: 8px 12px;\n            border: 1px solid #d1d5db;\n            border-radius: 20px;\n            font-size: 14px;\n            outline: none;\n            background-color: #f9fafb;\n          ">\n          <button id="chatbot-send" style="\n            background: ${this.config.primaryColor};\n            border: none;\n            border-radius: 50%;\n            width: 32px;\n            height: 32px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            color: white;\n            font-size: 14px;\n          ">âž¤</button>\n        </div>\n        \n        <div style="\n          padding: 8px 16px;\n          background-color: #fafafa;\n          border-top: 1px solid #f3f4f6;\n          text-align: center;\n          border-radius: 0 0 12px 12px;\n        ">\n          <p style="font-size: 11px; color: #6b7280; margin: 0;">ðŸ¤– ${this.config.poweredByText}</p>\n        </div>\n      </div>\n      \n      <button id="chatbot-toggle" style="\n        position: fixed;\n        ${(null==(n=this.config.position)?void 0:n.includes("bottom"))?"bottom: 16px;":"top: 16px;"}\n        ${(null==(i=this.config.position)?void 0:i.includes("right"))?"right: 16px;":"left: 16px;"}\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        background-color: ${this.config.primaryColor};\n        border: none;\n        color: white;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n        transition: transform 0.2s ease;\n        z-index: 9998;\n        font-size: 24px;\n      ">ðŸ’¬</button>\n    `;this.container.innerHTML=o,this.attachEventListeners()}attachEventListeners(){const t=document.getElementById("chatbot-toggle"),e=document.getElementById("chatbot-close"),n=document.getElementById("chatbot-send"),i=document.getElementById("chatbot-input");t&&(t.addEventListener("click",()=>this.toggleWidget()),t.addEventListener("mouseenter",()=>{t.style.transform="scale(1.1)"}),t.addEventListener("mouseleave",()=>{t.style.transform="scale(1)"})),e&&e.addEventListener("click",()=>this.closeWidget()),n&&i&&(n.addEventListener("click",()=>this.handleSendMessage()),i.addEventListener("keypress",t=>{"Enter"===t.key&&this.handleSendMessage()}))}toggleWidget(){const t=document.getElementById("chatbot-widget");if(t){const e="flex"===t.style.display;if(t.style.display=e?"none":"flex",!e){const t=document.getElementById("chatbot-input");t&&t.focus()}}}openWidget(){const t=document.getElementById("chatbot-widget");if(t){t.style.display="flex";const e=document.getElementById("chatbot-input");e&&e.focus()}}closeWidget(){const t=document.getElementById("chatbot-widget");t&&(t.style.display="none")}handleSendMessage(){const t=document.getElementById("chatbot-input"),e=document.getElementById("chatbot-messages");if(t&&t.value.trim()&&e){const n=t.value.trim(),i=document.createElement("div");i.style.cssText="display: flex; justify-content: flex-end;",i.innerHTML=`\n        <div style="\n          max-width: 80%;\n          padding: 8px 12px;\n          border-radius: 12px 12px 4px 12px;\n          background-color: ${this.config.primaryColor};\n          color: white;\n          font-size: 14px;\n          line-height: 1.4;\n        ">${n}</div>\n      `,e.appendChild(i),t.value="",setTimeout(()=>{const t=document.createElement("div");t.style.cssText="display: flex; justify-content: flex-start;",t.innerHTML=`\n          <div style="\n            max-width: 80%;\n            padding: 8px 12px;\n            border-radius: 12px 12px 12px 4px;\n            background-color: #f3f4f6;\n            color: #374151;\n            font-size: 14px;\n            line-height: 1.4;\n          ">Thanks for your message: "${n}". This is a demo response.</div>\n        `,e.appendChild(t),e.scrollTop=e.scrollHeight},1e3),e.scrollTop=e.scrollHeight}}sendMessage(t){console.log("Sending message:",t)}destroyWidget(){this.container&&(this.container.remove(),this.container=null,this.widget=null)}loadScript(t){return new Promise((e,n)=>{const i=document.createElement("script");i.src=t,i.onload=()=>e(),i.onerror=()=>n(new Error(`Failed to load script: ${t}`)),document.head.appendChild(i)})}}}();
